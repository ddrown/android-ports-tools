#!/bin/sh

NDK_HOME=~/droid/android-ndk
# 8 - Froyo/2.2, 15 - Ice Cream Sandwich/4.0.3
PLATFORM_DIR=$NDK_HOME/platforms/android-15
if [ -n "$GOOGLE_PLATFORM" ]; then
  PLATFORM_DIR=$NDK_HOME/platforms/android-$GOOGLE_PLATFORM
fi

case "$ARCH_NAME" in
  x86)  
    TOOLCHAIN=$NDK_HOME/default-x86-toolchain
    BIN=$TOOLCHAIN/bin
    GXX=$BIN/i686-linux-android-g++
    ARCH_NAME=x86
    LIBSTDCXX_ARCH=x86
    ;;
  arm)
    TOOLCHAIN=$NDK_HOME/default-arm-toolchain
    BIN=$TOOLCHAIN/bin
    GXX=$BIN/arm-linux-androideabi-g++
    ARCH_NAME=arm
    LIBSTDCXX_ARCH=${ANDROID_CPU_ARCH:-armeabi-v7a}
    ;;
  mips)
    TOOLCHAIN=$NDK_HOME/default-mips-toolchain
    BIN=$TOOLCHAIN/bin
    GXX=$BIN/mipsel-linux-android-g++
    ARCH_NAME=mips
    LIBSTDCXX_ARCH=mips
    ;;
  *)
    echo unknown architecture \"$ARCH_NAME\" >&2
    exit 1
    ;;
esac

LIBGCC=~/droid/lib-$ARCH_NAME/libgcc.a
PLATFORM_LIB_DIR=$PLATFORM_DIR/arch-$ARCH_NAME/usr/lib/
PLATFORM_INCLUDE_DIR=$PLATFORM_DIR/arch-$ARCH_NAME/usr/include/

CXX_INCLUDE_DIR=~/droid/lib-$ARCH_NAME/libstdc++/include/
CXX_INCLUDE_DIR_ARCH=~/droid/lib-$ARCH_NAME/libstdc++/libs/$LIBSTDCXX_ARCH/include/
CXX_LIB_DIR_ARCH=~/droid/lib-$ARCH_NAME/libstdc++/libs/$LIBSTDCXX_ARCH/
# CXX_INCLUDE_DIR_ARCH=~/droid/lib/libstdc++/libs/armeabi/include/
# CXX_LIB_DIR_ARCH=~/droid/lib/libstdc++/libs/armeabi/

ANDROID_PORTS_INCLUDE=~/droid/include/

CRTBEGIN=$PLATFORM_LIB_DIR/crtbegin_dynamic.o
CRTEND=$PLATFORM_LIB_DIR/crtend_android.o

LINKERARGS=""
INCLUDEARGS=""
ENDLIBS=""

# devel package libraries
if [ -n "$BASEDIR" -a -d ~/droid/$BASEDIR/lib-$ARCH_NAME ]; then
  LINKERARGS="-L"`echo ~/droid/$BASEDIR/lib-$ARCH_NAME`
elif [ -d ~/droid/data/local/lib-$ARCH_NAME ]; then
  LINKERARGS="-L"`echo ~/droid/data/local/lib-$ARCH_NAME`
fi
# devel package headers
if [ -n "$BASEDIR" -a -d ~/droid/$BASEDIR/include ]; then
  INCLUDEARGS="-I"`echo ~/droid/$BASEDIR/include`
elif [ -d ~/droid/data/local/include ]; then
  INCLUDEARGS="-I"`echo ~/droid/data/local/include`
fi

if echo " " "$*" | egrep -q -- '(^| )-shared '; then
  # tell gcc to not use the built-in default libraries
  LINKERARGS="$LINKERARGS -nostdlib"
  # note: use crtbegin_so / crtend_so?
  # where to find the system libraries like bionic
  LINKERARGS="$LINKERARGS -L$PLATFORM_LIB_DIR"
  # tell ld where to find system libraries at link time
  LINKERARGS="$LINKERARGS -Wl,-rpath-link=$PLATFORM_LIB_DIR"
  # where to find the system libraries like bionic
  LINKERARGS="$LINKERARGS -L$PLATFORM_LIB_DIR -L$CXX_LIB_DIR_ARCH"
  # link against bionic (libc)
  LINKERARGS="$LINKERARGS -lc"
  # link against stdc++
  if [ -z "$USE_STATIC_GNUSTL" ]; then
    LINKERARGS="$LINKERARGS -lgnustl_shared"
  else
    ENDLIBS="$CXX_LIB_DIR_ARCH/libgnustl_static.a"
  fi

  # needed for things like __aeabi_ulcmp
  ENDLIBS="$ENDLIBS $LIBGCC"
elif echo " " "$*" | egrep -q -- '(^| )-(c|S|E|nostdlib) '; then
  # linker not used for these or we're passing our own linker arguments
  LINKERARGS=""
else
  # tell gcc to not use the built-in default libraries
  LINKERARGS="$LINKERARGS -nostdlib"
  # where to find the executable start/stop objects
  LINKERARGS="$LINKERARGS $CRTBEGIN $CRTEND"
  # where to find the system libraries like bionic
  LINKERARGS="$LINKERARGS -L$PLATFORM_LIB_DIR -L$CXX_LIB_DIR_ARCH"
  # link against bionic (libc)
  LINKERARGS="$LINKERARGS -lc"
  # link against stdc++
  if [ -z "$USE_STATIC_GNUSTL" ]; then
    LINKERARGS="$LINKERARGS -lgnustl_shared"
  else
    ENDLIBS="$CXX_LIB_DIR_ARCH/libgnustl_static.a"
  fi
  # tell ld where to find system libraries at link time
  LINKERARGS="$LINKERARGS -Wl,-rpath-link=$PLATFORM_LIB_DIR"

  # needed for things like __aeabi_ulcmp
  ENDLIBS="$ENDLIBS $LIBGCC"
fi

ISYSTEM_ARGS="-isystem $ANDROID_PORTS_INCLUDE -isystem $PLATFORM_INCLUDE_DIR"
ISYSTEM_ARGS="$ISYSTEM_ARGS -isystem $CXX_INCLUDE_DIR -isystem $CXX_INCLUDE_DIR_ARCH"

CMDARGS="$INCLUDEARGS $ISYSTEM_ARGS $LINKERARGS"

if [ -n "$DEBUG_AGCC" ]; then
  set -x
  echo "STAR: $*"
fi
$GXX $CMDARGS "$@" $ENDLIBS
